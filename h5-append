#!/usr/bin/env python
"Add a column to an existing table"
from root_numpy import rec2array
import numpy as np
from matplotlib.mlab import rec_append_fields
import tables
from rootpy.extern.argparse import ArgumentParser
import logging
import sys
from moments import HCM

log = logging.getLogger('h5-append')

parser = ArgumentParser()
parser.add_argument('-i', '--infile', required=True)
args = parser.parse_args()

fileh = tables.open_file(args.infile, "a")
#log.info("Contents of {0}: \n{1}".format(args.infile, fileh))
for table in fileh.root:
    log.info("appending fields to {0}: {1}".format(table.name, table))
    outname=table.name
    outtitle=table.title

    mom_branches = [
        'ditau_tau0_pt', 'ditau_tau0_eta', 'ditau_tau0_phi', 'ditau_tau0_m',
        'ditau_tau1_pt', 'ditau_tau1_eta', 'ditau_tau1_phi', 'ditau_tau1_m',
        'jet_0_pt', 'jet_0_eta', 'jet_0_phi', 'jet_0_m',
        'jet_1_pt', 'jet_1_eta', 'jet_1_phi', 'jet_1_m',
    ]
    rec = table.read()

    mom_arr = rec[mom_branches]
    mom_arr = rec2array( mom_arr ).reshape((mom_arr.shape[0], 4, 4))
    # convert array of pT, eta, phi, m
    # to array of p, px, py, pz, pT, eta, phi, m
    kin_arr = np.empty(shape=(mom_arr.shape[0], 4, 8))
    # |p| = pT cosh eta
    kin_arr[:,:,0] = mom_arr[:,:,0] * np.cosh(mom_arr[:,:,1])
    # px, py, pz
    kin_arr[:,:,1] = mom_arr[:,:,0] * np.cos(mom_arr[:,:,2])
    kin_arr[:,:,2] = mom_arr[:,:,0] * np.sin(mom_arr[:,:,2])
    kin_arr[:,:,3] = mom_arr[:,:,0] * np.sinh(mom_arr[:,:,1])
    # pT, eta, phi, m
    kin_arr[:,:,4] = mom_arr[:,:,0]
    kin_arr[:,:,5] = mom_arr[:,:,1]
    kin_arr[:,:,6] = mom_arr[:,:,2]
    kin_arr[:,:,7] = mom_arr[:,:,3]

#    rec5_moments = HCM( 5, kin_arr[:,:,:])
#    rec = rec_append_fields(rec,
#        names='HCM5',
#        arrs=rec5_moments,
#        dtypes=np.dtype('f8'))
#    rec2jj_moments = HCM( 2, kin_arr[:,[2,3],:])#, kin_arr[:,:,:] )
#    rec = rec_append_fields(rec,
#        names='HCM2jj',
#        arrs=rec2jj_moments,
#        dtypes=np.dtype('f8'))
#    rec2_moments = HCM( 2, kin_arr[:,:,:])#, kin_arr[:,:,:] )
#    rec = rec_append_fields(rec,
#        names='HCM2',
#        arrs=rec2_moments,
#        dtypes=np.dtype('f8'))
#    rec3_moments = HCM( 3, kin_arr[:,:,:])#, kin_arr[:,:,:] )
#    rec = rec_append_fields(rec,
#        names='HCM3',
#        arrs=rec3_moments,
#        dtypes=np.dtype('f8'))
#    rec1_moments = HCM( 1, kin_arr[:,:,:])#, kin_arr[:,:,:] )
#    rec = rec_append_fields(rec,
#        names='HCM1',
#        arrs=rec1_moments,
#        dtypes=np.dtype('f8'))

# VBF Variables
#    rec = rec_append_fields(rec,
#        names='dEta_jets',
#        arrs=(np.absolute(kin_arr[:,2,5]-kin_arr[:,3,5])),
#        dtypes=np.dtype('f8'))
    rec = rec_append_fields(rec,
        names='eta_product_jets',
        arrs=(kin_arr[:,2,5]*kin_arr[:,3,5]),
        dtypes=np.dtype('f8'))
    rec = rec_append_fields(rec,
        names='',
        arrs=[],
        dtypes=np.dtype('f8'))
# M2 = 2 pT1 pT2 ( cosh(eta1-eta2) - cos(phi1-phi2) )
#    M2 = kin_arr[:,2,4] * kin_arr[:,3,4] * 2 * (np.cosh(kin_arr[:,2,5]-kin_arr[:,3,5])-np.cos(kin_arr[:,2,6]-kin_arr[:,3,6]))
#    rec = rec_append_fields(rec,
#        names='mass_jet1_jet2',
#        arrs=np.absolute(M2)**0.5*10**3,
#        dtypes=np.dtype('f8'))
#    sum_vector_pt2 = np.sum(kin_arr[:,:,1], axis = 1)**2 \
#                  + np.sum(kin_arr[:,:,2], axis = 1)**2
#    rec = rec_append_fields(rec,
#        names='vector_sum_pt',
#        arrs=sum_vector_pt2**0.5,
#        dtypes=np.dtype('f8'))

# centrality: exp( -4/(eta1-eta2)^2 (eta- eta1+eta2.2)^2)
#    tau1_centrality = np.exp( \
#            -4 / (kin_arr[:,2,5]-kin_arr[:,3,5])**2 \
#            * (kin_arr[:,0,5]-(kin_arr[:,2,5]+kin_arr[:,3,5])/2)**2 \
#            )
#    tau2_centrality = np.exp( \
#            -4 / (kin_arr[:,2,5]-kin_arr[:,3,5])**2 \
#            * (kin_arr[:,1,5]-(kin_arr[:,2,5]+kin_arr[:,3,5])/2)**2 \
#            )
#
#    rec = rec_append_fields(rec,
#        names='tau1_centrality',
#        arrs=tau1_centrality,
#        dtypes=np.dtype('f8'))
#    rec = rec_append_fields(rec,
#        names='tau2_centrality',
#        arrs=tau2_centrality,
#        dtypes=np.dtype('f8'))

# Tau PT ratio for boosted
    rec = rec_append_fields(rec,
        names='ditau_pt_ratio',
        arrs=(kin_arr[:,0,4]/kin_arr[:,1,4]),
        dtypes=np.dtype('f8'))
# Create a new table with the new description
    new_table = fileh.create_table(
        '/', outname+'_tmp',
        rec, outtitle)

    new_table.flush()

    table.remove()

# Move table2 to table
    new_table.move('/', outname)


log.info("Finished...")
fileh.close()

