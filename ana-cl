#!/usr/bin/env python
"""
Create variable plots
"""
from mva.cmd import get_parser

args = get_parser(actions=False).parse_args()

# rootpy imports
from rootpy.tree import Cut

# local imports
from mva.plotting import draw_channel_array
from mva.systematics import get_systematics, parse_systematics
from mva.variables import (VARIABLES, HH_VARIABLES,
                           LH_VARIABLES, YEAR_VARIABLES,
                           get_label)
from mva.analysis import get_analysis
from mva import log;

if args.channel == 'hadhad':
    VARIABLES.update(HH_VARIABLES)
elif args.channel == 'lephad':
    VARIABLES.update(LH_VARIABLES)

if args.plot_expr is not None:
    VARS = {
        tuple(args.plot_expr.split(',')): {
            'title': args.plot_name,
            'range': (args.plot_min, args.plot_max),
            'bins': args.plot_bins,
            'filename': 'expr_' + args.plot_name.replace(' ', '_')}}
elif args.plots is not None:
    log.info('Plot selected variables: {0}'.format(args.plot_field))
    VARS = {}
    for f in args.plot_field:
        VARS[f] = VARIABLES[f]
else:
    log.info('Make the entire plotbook')
    VARS = VARIABLES
    # YEAR_VARIABLES need to be updated
    # VARS.update(YEAR_VARIABLES[args.year])

SYSTEMATICS = get_systematics(args.year)
args.systematics_components = parse_systematics(args.systematics_components)
# categories = CATEGORIES[args.categories]
category_names = args.category_names
target_region = args.target_region

analysis = get_analysis(args)
output_suffix = analysis.get_suffix()
def draw( **kwargs ):
    default_args = {
        'analysis':analysis,
        'vars':[],
        'mass':125,
        'mode':'combined',
        'signal_scale':50,
        'category':args.categories[0],
        'region':target_region,
        #systematics_components=args.systematics_components,
        'output_formats':args.output_formats,
        'weighted':(not args.no_weight),
        'plots':args.plots,
        'output_suffix':output_suffix,
        'unblind':args.unblind,  # or is_control,
        'show_ratio':args.show_ratio,
        'include_signal':True,
        'no_data':args.no_data,
        'top_label':"Fakes Model: {0}".format(analysis.fakes_region),
        'logy':False
    }
    default_args.update(**kwargs)
    draw_channel_array( **default_args )
import code; code.InteractiveConsole(locals=globals()).interact()
