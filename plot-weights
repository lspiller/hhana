#!/usr/bin/env python

import ROOT
from ROOT import TLatex
from rootpy.plotting import Hist, Hist2D, Canvas, Pad, Legend
from rootpy.plotting.utils import draw
from root_numpy import fill_hist
from mva.samples import Embedded_Ztautau, Data, Pythia_Ztautau
from mva.variables import get_binning, get_label, get_scale
from mva import save_canvas, MMC_MASS
from mva.categories.hadhad import Category_Preselection, Category_Boosted
#from mva.plotting import set_colors
from mva.plotting.utils import set_colors
import numpy as np
from itertools import product


def draw_array(array, field, year, category, data_info):
    canvas = Canvas()
    xmin, xmax = array.min(), array.max()
    width = xmax - xmin
    hist = Hist(30, xmin - width / 4 - 0.01, xmax + width / 4 + 0.01,
                drawstyle='hist', linewidth=2)
    fill_hist(hist, array)
    logy = array.std() < 0.1 * width
    draw(hist, canvas, ytitle='Events', xtitle=field,
         xdivisions=507, logy=logy, logy_crop_value=1,
         ypadding=(0.25, 0))
    label.DrawLatex(0.45, 0.85, str(data_info))
    save_canvas(canvas, 'plots/weights',
                'ztt_weight_{0}_{1}_{2}'.format(field, category.name, year % 1000),
                formats=('eps', 'png'))


WEIGHTS = [
    None,
    'ditau_tau0_sf_NOMINAL_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_STATDATA_1up_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM'
    'ditau_tau0_sf_NOMINAL_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',
    'weight',
    'ditau_tau0_sf_NOMINAL_TAU_EFF_SELECTION',

    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_STATDATA_1down_effSF_HLT_tau25_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_STATDATA_1up_effSF_HLT_tau25_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_STATMC_1up_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_STATMC_1down_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_SYST_1up_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_TRIGGER_SYST_1down_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',
    'ditau_tau0_sf_NOMINAL_effSF_HLT_tau35_medium1_tracktwo_JETIDBDTMEDIUM',

    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_JETID_TOTAL_1up_TAU_EFF_JETIDBDTTIGHT',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_JETID_TOTAL_1down_TAU_EFF_JETIDBDTTIGHT',
    'ditau_tau0_sf_NOMINAL_TAU_EFF_JETIDBDTTIGHT',

    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_ELEOLR_TOTAL_1down_TAU_EFF_SELECTION',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_ELEOLR_TOTAL_1up_TAU_EFF_SELECTION',
    'ditau_tau0_sf_NOMINAL_TAU_EFF_ELEOLR',

    'ditau_tau0_sf_NOMINAL_TAU_EFF_RECO',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_RECO_TOTAL_1down_EFF_RECO',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_RECO_TOTAL_1up_EFF_RECO',

    'ditau_tau0_sf_NOMINAL_TAU_EFF_SELECTION',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_SELECTION_TOTAL_1down_EFF_SELECTION',
    'ditau_tau0_sf_TAUS_TRUEHADTAU_EFF_SELECTION_TOTAL_1up_EFF_SELECTION',]

FIELDS = [
    'ditau_dr',
    'ditau_deta',
    'ditau_dphi',
    MMC_MASS,
    'ditau_tau0_pt',
    'ditau_tau1_pt',
    'ditau_vect_sum_pt']


#for year, category in product((2011, 2012), (Category_Preselection, Category_Boosted)):

for year, category in product((2015,), (Category_Preselection, Category_Boosted)):
    data = Data(year=year)
    label = TLatex()
    label.SetNDC()
    label.SetTextFont(43)
    label.SetTextSize(22)
    ztt = Pythia_Ztautau(year=year)
    weights = ztt.weights()
    rec = ztt.merged_records(category=category, fields=weights)
    # draw product
    product = reduce(np.multiply, [rec[field] for field in weights])
    draw_array(product, 'product', year, category, data.info)
    # normalize weight field
    rec['weight'] *= product.max() / rec['weight'].max()
    for field in weights + ['weight']:
        array = rec[field]
        draw_array(array, field, year, category, data.info)

    rec_fields = ztt.merged_records(
        category=category,
        fields=FIELDS)

    for field in FIELDS:
        binning = get_binning(field, category, year)
        # draw each field after removing each weight
        hists = []
        for weight in WEIGHTS:
            ztt = Pythia_Ztautau(year=year)
            if weight is not None:
                setattr(ztt, weight, False)
            hist = Hist(*binning,
                        title='no {0}'.format(weight) if weight is not None
                              else 'all weights',
                        linewidth=2, drawstyle='hist', legendstyle='L')
            ztt.draw(field, hist, category=category)
            # normalize
            hist /= hist.integral()
            hists.append(hist)
        # ratio wrt nominal
        nominal = hists[0].Clone()
        for hist in hists:
            hist /= nominal
        set_colors(hists)
        canvas = Canvas(width=ROOT.gStyle.GetCanvasDefW() * 2)
        pad = Pad(0, 0, .5, 1)
        pad.Draw()
        pad.cd()
        draw(hists, pad, ytitle='(no weight X) / (all weights)',
             xtitle=get_label(field),
             xdivisions=507, ypadding=(0.25, 0), snap=False)
        pad.cd()
        label.DrawLatex(0.45, 0.85, str(data.info))
        canvas.cd()
        leg_pad = Pad(.5, 0, 1, 1)
        leg_pad.Draw()
        leg_pad.cd()
        leg = Legend(hists, pad=leg_pad, leftmargin=-0.15, topmargin=0,
                     margin=0.15)
        leg.Draw()
        save_canvas(canvas, 'plots/weights',
                    'ztt_weight_{0}_{1}_{2}'.format(field, category.name, year % 1000),
                    formats=('eps', 'png'))

        # draw correlation of this field with each weight
        for weight in weights:
            rec_x = rec_fields[field] * get_scale(field)
            rec_y = rec[weight]
            canvas = Canvas()
            hist = Hist2D(binning[0], binning[1], binning[2],
                          20, float(rec_y.min()-0.01), float(rec_y.max()+0.01),
                          drawstyle='BOX', color='red', fillstyle='solid')
            fill_hist(hist, np.c_[rec_x, rec_y])
            hist.Draw()
            hist.xaxis.title = get_label(field)
            hist.xaxis.SetNdivisions(507)
            hist.yaxis.title = weight
            hist.yaxis.SetNdivisions(507)
            save_canvas(canvas, 'plots/weights',
                'ztt_weight_{0}_vs_{1}_{2}_{3}'.format(weight, field, category.name, year % 1000),
                formats=('eps', 'png'))
