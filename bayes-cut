#!/usr/bin/env python

from statstools.significance import significance
from rootpy.tree import Cut
from multiprocessing import Process
from statstools.parallel import map_pool
from rootpy.io import root_open
from mva.categories.hadhad import (
        Category_Preselection,
        Category_Cuts_VBF,
        Category_Cuts_Boosted,)

from mva.categories.hadhad.common import CUTS_VBF, CUTS_BOOSTED

from rootpy.stats import histfactory
from mva.workspace import cuts_workspace, write_workspaces
from mva import log;
from rootpy.extern.argparse import ArgumentParser

from mva.analysis import Analysis, get_analysis
import tempfile, os

from mva import CONST_PARAMS, CACHE_DIR, MMC_MASS, POI
parser = ArgumentParser()
parser.add_argument('--suffix', default=None)
parser.add_argument('--procs', type=int, default=-1)
parser.add_argument('category', choices=('vbf', 'boosted'))
parser.add_argument('--max-iter', type=int, default=500)
parser.add_argument('--systematics', default=True, action='store_false')
args = parser.parse_args()


Boosted_Cuts = [
        ('Deta_taus', 'ditau_deta < {0}', (1, 3) ),
        ('Pt_j1'    , 'jet_0_pt > {0}', (30, 100) ),
        ('ditau_dr' , 'ditau_dr < {0}', (1, 3) ),
        ('higgspt'  , 'ditau_mmc_maxw_pt > {0}', (50, 400) ),
    ]

VBF_Cuts = [
        ('Deta_taus', 'ditau_deta < {0}', (1, 2) ),
        ('Pt_j1'    , 'jet_0_pt > {0}', (40, 100) ),
        ('Pt_j2'    , 'jet_1_pt > {0}', (30, 80) ),
        ('ditau_dr' , 'ditau_dr < {0}', (1, 2) ),
        ('Deta_jets', 'dijet_deta > {0}', (2, 3) ),
    ]


analysis = Analysis(
                year=2015,
                systematics=False,
                suffix=args.suffix)


def getSignificance(cut_values):

    cut_values=list(cut_values)
    vbf_cut = {}
    for name, cutstr, bounds in VBF_Cuts:
        cut_value = cut_values.pop(0)
        vbf_cut[name] = Cut( cutstr.format(cut_value*(bounds[1]-bounds[0]) + bounds[0]) )

    VBF = vbf_cut['Deta_taus']&vbf_cut['Pt_j1']&vbf_cut['Pt_j2']&vbf_cut['ditau_dr']&vbf_cut['Deta_jets']

    Category_Cuts_VBF.cuts = VBF
#    Category_Cuts_Boosted.cuts = Boosted_Cuts

    sr, cr = cuts_workspace(analysis=analysis,
                        categories='cuts_merged',
                        masses=[125.],
                        systematics=args.systematics,
                        sideband=True,
                        cuts=None)

#    signal_regions, control_regions = {}, {}
#    signal_regions[2015] = sr
#    control_regions[2015] = cr
    print sr[125]
    measurement = histfactory.make_measurement(
        name, sr[125].values(),
        POI=POI,
        const_params=CONST_PARAMS)
    workspace = histfactory.make_workspace(measurement, name=name,
                                                   silence=False)

    sig, mu, mu_error = significance(workspace)
    print "1"*20
    print "SIGNIFICANCE: {0}".format(sig)
    print "MU: {0} +- {1}".format(mu, mu_error)
    print "1"*20
    return 0 if sig != sig else -sig # Handle case where sig is nan and fit doesnt converge

class Worker(Process):
    output = None
    def __init__(self, *cut_values):
        super(Worker, self).__init__()
        self.cut_values = cut_values
    def run(self):
        cut_values = self.cut_values
        sig = getSignificance( cut_values )
        self.output = sig

class ObjectiveFunction(object):
    def __init__(self, model_name, function ):
        self.model_name = model_name
        self.function = function

    def __call__( self, args ):
        import numpy as np
#        workers_sig = [Worker(cut_values) for cut_values in args]
        output = []
        for cut_values in args:
            output.append( getSignificance(cut_values) )
        return np.array(output)[:,np.newaxis]
#        return np.array( map_pool( Worker, args ) )[:,np.newaxis]

import GPyOpt
from numpy.random import seed
seed(22125)

list_of_bounds = []
for _, _, bounds in VBF_Cuts:
#    list_of_bounds.append( bounds )
    list_of_bounds.append((0,1))

objective = ObjectiveFunction( "VBF Cuts", getSignificance )
bo = GPyOpt.methods.BayesianOptimization( f=objective, bounds=list_of_bounds, )

bo.run_optimization(max_iter=args.max_iter, eps=1e-3, n_inbatch=1, n_procs=1,
                    batch_method='predictive',
                    acqu_optimize_method='fast_random',
                    verbose=True)

print bo.x_opt
for x, (n,b) in zip(bo.x_opt, [(n,b) for n,_, b in VBF_Cuts]):
    print "{} : {}".format(n, x*(b[1]-b[0])+b[0])

print bo.fx_opt

bo.plot_acquisition(filename='bo_acquisition.pdf')
bo.plot_convergence(filename='bo_convergence.pdf')
